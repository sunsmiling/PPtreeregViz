[{"path":"/articles/PPtreeregViz.html","id":"introduction-of-pptreeregviz","dir":"Articles","previous_headings":"","what":"Introduction of PPtreeregViz","title":"Get started with `PPtreeregViz`","text":"package developed visualize Projection Pursuit Regression Tree model  add explanatory possibilities model using techniques. Since projection pursuit regression tree based tree method grows using projection input features, model excellent interpretability . visualizing node model, global analysis model possible. (method model-specific can used model.) Global interpretation using method possible, difficult interpret one observation goes several projections. overcome , developed techniques slightly modified fit structure model. Using visualization methods, possible figure features affected model’s prediction. processes, can determine whether model trustworthy .","code":""},{"path":"/articles/PPtreeregViz.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started with `PPtreeregViz`","text":"can install released version CRAN : development version GitHub :","code":"devtools::install_github(\"PPtreeregViz\") # install.packages(\"devtools\") devtools::install_github(\"sunsmiling/PPtreeregViz\")"},{"path":"/articles/PPtreeregViz.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"Get started with `PPtreeregViz`","text":"example, Boston house price data MASS library used. first part, talk visualizing model . Next, see example explaining model applying techniques.","code":""},{"path":"/articles/PPtreeregViz.html","id":"boston-data","dir":"Articles","previous_headings":"Example Data","what":"Boston Data","title":"Get started with `PPtreeregViz`","text":"Boston data divided train data set test data set ratio 7:3. particular, first observation test data set specifically selected “sample_one”.","code":""},{"path":"/articles/PPtreeregViz.html","id":"build-model-plot-model-itself","dir":"Articles","previous_headings":"","what":"Build Model & Plot Model itself","title":"Get started with `PPtreeregViz`","text":"Create model Depth 2 ease visualization interpretation. pp_ggparty, marginal predicted values actual values drawn according independent variables final node. group lower 25% house prices, (lower status population (percent)) wide range 10 30, group top 25%, values less 15.","code":""},{"path":"/articles/PPtreeregViz.html","id":"variable-importance-plot","dir":"Articles","previous_headings":"Build Model & Plot Model itself","what":"variable importance plot","title":"Get started with `PPtreeregViz`","text":"using combination regression coefficient values projection values split node, importance variables model built can calculated. PPimportance calculate split node’s coefficients can drawn final leaf. blue bar represents positive slope (effect), red bar represents negative slope. Variables sorted according overall size bar, can know variables considered important final node sequentially. use arguments marginal = TRUE num_var, can see desired number marginal variable importance whole rather final leaf.","code":""},{"path":"/articles/PPtreeregViz.html","id":"node-visualization","dir":"Articles","previous_headings":"Build Model & Plot Model itself","what":"Node visualization","title":"Get started with `PPtreeregViz`","text":"PPregNodeViz can visualize train data fitted node. node.id 4 (.e. first final node), result fitted data displayed black color. order improve accuracy, can choose final rule 1 5, whether use single value linear combination independent variables. 4th final leaf’s node id 7.","code":""},{"path":"/articles/PPtreeregViz.html","id":"variable-visualization","dir":"Articles","previous_headings":"Build Model & Plot Model itself","what":"Variable visualization","title":"Get started with `PPtreeregViz`","text":"Using PPregvarViz shows results similar partial dependent plots independent variable affects prediction Y actual data. argument Indiv=TRUE, picture drawn dividing grid final node.","code":""},{"path":[]},{"path":"/articles/PPtreeregViz.html","id":"calculate-shap-for-method","dir":"Articles","previous_headings":"Using method","what":"Calculate SHAP for method","title":"Get started with `PPtreeregViz`","text":"far, seen global movement model . now , proceed model analysis using SHAP values. Using SHAP value, can see locally one sample data moves model. order calculate SHAP value faster, method calculating kernel shap package slightly modified used. Since empirical method, accurate calculation method, takes time calculate, simple calculation method, estimate value, used. Although difference calculation speed quite large, can seen results similar.","code":""},{"path":"/articles/PPtreeregViz.html","id":"decision-plot","dir":"Articles","previous_headings":"Using method","what":"Decision plot","title":"Get started with `PPtreeregViz`","text":"creates tree based range y values. Therefore, calculating contributions features one observation, natural different values calculated final leaf. Compared data y value lower 25% (first final leaf), effect [sample_one] large. hand, can seen influence rm (average number rooms per dwelling) large data upper 25% large y value (4th final leaf). feature affects y hat one observation can drawn two ways. decisionplot waterfallplot.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eun-Kyung Lee. Author, contributor. HyunSun Cho. Author, maintainer. Nikolai Sellereite. Contributor, copyright holder.            Author included shapr fragments Martin Jullum. Contributor, copyright holder.            Author included shapr fragments Annabelle Redelmeier. Contributor, copyright holder.            Author included shapr fragments Norsk Regnesentral. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lee E, Cho H (2022). PPtreeregViz: Projection Pursuit Regression Tree Visualization. R package version 2.0.3, https://CRAN.R-project.org/package=PPtreeregViz.","code":"@Manual{,   title = {PPtreeregViz: Projection Pursuit Regression Tree Visualization},   author = {Eun-Kyung Lee and HyunSun Cho},   year = {2022},   note = {R package version 2.0.3},   url = {https://CRAN.R-project.org/package=PPtreeregViz}, }"},{"path":"/index.html","id":"pptreeregviz","dir":"","previous_headings":"","what":"PPtreeregViz","title":"Projection Pursuit Regression Tree Visualization ","text":"package developed visualize Projection Pursuit Regression Tree model  add explanatory possibilities model using techniques. Since projection pursuit regression tree based tree method grows using projection input features, model excellent interpretability . visualizing node model, global analysis model possible. (method model-specific can used model.) Global interpretation using method possible, difficult interpret one observation goes several projections. overcome , developed techniques slightly modified fit structure model. Using visualization methods, possible figure features affected model’s prediction. processes, can determine whether model trustworthy .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Projection Pursuit Regression Tree Visualization ","text":"can install released version CRAN : development version GitHub :","code":"devtools::install_github(\"PPtreeregViz\") # install.packages(\"devtools\") devtools::install_github(\"sunsmiling/PPtreeregViz\")"},{"path":"/index.html","id":"example-data","dir":"","previous_headings":"","what":"Example Data","title":"Projection Pursuit Regression Tree Visualization ","text":"example, Boston house price data MASS library used. first part, talk visualizing model . Next, see example explaining model applying techniques.","code":""},{"path":"/index.html","id":"boston-data","dir":"","previous_headings":"Example Data","what":"Boston Data","title":"Projection Pursuit Regression Tree Visualization ","text":"Boston data divided train data set test data set ratio 7:3. particular, first observation test data set specifically selected “sample_one”.","code":"data(\"Boston\")  set.seed(1234) proportion = 0.7 idx_train = sample(1:nrow(Boston), size = round(proportion * nrow(Boston))) sample_train = Boston[idx_train, ] sample_test =  Boston[-idx_train, ] set.seed(1234) sample_one <- sample_test[sample(1:nrow(sample_test),1),-14]"},{"path":"/index.html","id":"build-model--plot-model-itself","dir":"","previous_headings":"","what":"Build Model & Plot Model itself","title":"Projection Pursuit Regression Tree Visualization ","text":"Create model Depth 2 ease visualization interpretation.  pp_ggparty, marginal predicted values actual values drawn according independent variables final node. group lower 25% house prices, (lower status population (percent)) wide range 10 30, group top 25%, values less 15.","code":"library(PPtreeregViz) Model <- PPtreeregViz::PPTreereg(medv ~., data = sample_train, DEPTH = 2) plot(Model) #> NULL pp_ggparty(Model, \"lstat\", final.rule = 1) pp_ggparty(Model, \"lstat\", final.rule = 4) pp_ggparty(Model, \"lstat\", final.rule = 5)"},{"path":"/index.html","id":"variable-importance-plot","dir":"","previous_headings":"Build Model & Plot Model itself","what":"variable importance plot","title":"Projection Pursuit Regression Tree Visualization ","text":"using combination regression coefficient values projection values split node, importance variables model built can calculated. PPimportance calculate split node’s coefficients can drawn final leaf. blue bar represents positive slope (effect), red bar represents negative slope. Variables sorted according overall size bar, can know variables considered important final node sequentially.  use arguments marginal = TRUE num_var, can see desired number marginal variable importance whole rather final leaf.","code":"Tree.Imp <- PPimportance(Model)  plot(Tree.Imp) plot(Tree.Imp, marginal = TRUE, num_var = 5)"},{"path":"/index.html","id":"node-visualization","dir":"","previous_headings":"Build Model & Plot Model itself","what":"Node visualization","title":"Projection Pursuit Regression Tree Visualization ","text":"PPregNodeViz can visualize train data fitted node. node.id 4 (.e. first final node), result fitted data displayed black color. order improve accuracy, can choose final rule 1 5, whether use single value linear combination independent variables.   4th final leaf’s node id 7.","code":"PPregNodeViz(Model, node.id = 1) PPregNodeViz(Model, node.id = 4) #> Warning: Removed 2 rows containing missing values (`geom_point()`). PPregNodeViz(Model,node.id = 7) #> Warning: Removed 2 rows containing missing values (`geom_point()`)."},{"path":"/index.html","id":"variable-visualization","dir":"","previous_headings":"Build Model & Plot Model itself","what":"Variable visualization","title":"Projection Pursuit Regression Tree Visualization ","text":"Using PPregvarViz shows results similar partial dependent plots independent variable affects prediction Y actual data. argument Indiv=TRUE, picture drawn dividing grid final node.","code":"PPregVarViz(Model,\"lstat\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' PPregVarViz(Model,\"lstat\",indiv = TRUE) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' PPregVarViz(Model,\"chas\",var.factor = TRUE) PPregVarViz(Model,\"chas\",indiv = TRUE, var.factor = TRUE)"},{"path":[]},{"path":"/index.html","id":"calculate-shap-for-method","dir":"","previous_headings":"Using method","what":"Calculate SHAP for method","title":"Projection Pursuit Regression Tree Visualization ","text":"far, seen global movement model . now , proceed model analysis using SHAP values. Using SHAP value, can see locally one sample data moves model. order calculate SHAP value faster, method calculating kernel shap package slightly modified used. Since empirical method, accurate calculation method, takes time calculate, simple calculation method, estimate value, used. Although difference calculation speed quite large, can seen results similar.","code":"sample_one #>       crim zn indus chas   nox    rm  age    dis rad tax ptratio black lstat #> 81 0.04113 25  4.86    0 0.426 6.727 33.5 5.4007   4 281      19 396.9  5.29 ppshapr.simple(PPTreeregOBJ = Model, testObs = sample_one, final.rule = 5)$dt #>        none       crim           zn     indus       chas      nox        rm #> 1: 34.19573 -0.3102618 -0.005457964 0.1946273 -0.1216814 1.159332 -3.260457 #>           age        dis        rad       tax   ptratio      black     lstat #> 1: 0.08411667 -0.3871038 -0.2375765 0.3034294 -1.093994 -0.1602463 0.6558048 #>    finalLeaf #> 1:         4"},{"path":"/index.html","id":"decision-plot","dir":"","previous_headings":"Using method","what":"Decision plot","title":"Projection Pursuit Regression Tree Visualization ","text":"creates tree based range y values. Therefore, calculating contributions features one observation, natural different values calculated final leaf. Compared data y value lower 25% (first final leaf), effect [sample_one] large. hand, can seen influence rm (average number rooms per dwelling) large data upper 25% large y value (4th final leaf). feature affects y hat one observation can drawn two ways. decisionplot waterfallplot.","code":"decisionplot(Model, testObs = sample_one, method=\"simple\",varImp = \"shapImp\",final.rule=5) waterfallplot(Model, testObs = sample_one, method=\"simple\", final.rule=5)"},{"path":"/index.html","id":"summary--dependence-plot","dir":"","previous_headings":"Using method","what":"Summary & Dependence plot","title":"Projection Pursuit Regression Tree Visualization ","text":"like see entire SHAP values train data move model, effect one observation. Since quiet computationally expensive, calculated using . summary plot visualizes overall features training data affect SHAP distribution. final leaf, red dot means feature value corresponding point high value. yellow color means middle value feature value, blue color lower feature value. leaf, features sorted descending order SHAP’s variance. final leaves, rm, , tax great influence determining house price common.  dependency plot, final leaf, effect number rooms house price can seen. number rooms 6 less, number rooms significant effect house price low house price (first final leaf), SHAP value negative value number rooms decreased data corresponding top 25% house price. words, can interpreted area low house price, number rooms small average, affect house price, area high house price, small number rooms negative effect house price.  can add color see relates feature. result specifying color, can seen lower larger number rooms, SHAP values increase.  Next, result examining age, higher contributed lower house price.","code":"shap_long <- ppshapr_prep(Model, final.rule = 5, method = \"simple\") #takes about 4 minutes PPshapsummary(data_long = shap_long) PPshapdependence(shap_long,x = \"rm\") PPshapdependence(shap_long, x = \"rm\", color_feature = \"lstat\") PPshapdependence(shap_long,x = \"crim\", color_feature = \"age\")"},{"path":"/index.html","id":"submodular-pick-for-projection-pursuit-regression-tree","dir":"","previous_headings":"Using method","what":"Submodular Pick for Projection pursuit regression Tree","title":"Projection Pursuit Regression Tree Visualization ","text":"","code":"pick_obs_1 <- subpick(shap_long,final.leaf = 1, obsnum = 10) pick_obs_4 <- subpick(shap_long,final.leaf = 4, obsnum = 10) subpick(shap_long,final.leaf =1, obsnum = 5) #> $df #>        crim zn indus chas   nox    rm   age    dis rad tax ptratio  black lstat #> 1: 67.92080  0 18.10    0 0.693 5.683 100.0 1.4254  24 666    20.2 384.97 22.98 #> 2:  0.25387  0  6.91    0 0.448 5.399  95.3 5.8700   3 233    17.9 396.90 30.81 #> 3:  1.41385  0 19.58    1 0.871 6.129  96.0 1.7494   5 403    14.7 321.02 15.12 #> 4:  1.13081  0  8.14    0 0.538 5.713  94.1 4.2330   4 307    21.0 360.17 22.60 #> 5:  4.54192  0 18.10    0 0.770 6.398  88.0 2.5182  24 666    20.2 374.56  7.79 #>  #> $obs #> [1]   3  62  97 186 230 decisionplot(Model, testObs = pick_obs_1$df ,              method=\"simple\",              varImp = \"shapImp\",final.rule = 5, Yrange = TRUE) decisionplot(Model, testObs = pick_obs_4$df ,              method=\"simple\",              varImp = \"shapImp\",final.rule = 5, Yrange = TRUE)"},{"path":"/index.html","id":"collaboration-with-other-packages","dir":"","previous_headings":"Using method","what":"Collaboration with other packages","title":"Projection Pursuit Regression Tree Visualization ","text":"can collaborate various already developed ( lime). use package, see characteristics final node, can see results entire model. following shows example using functions package.","code":""},{"path":"/index.html","id":"section","dir":"","previous_headings":"","what":"Projection Pursuit Regression Tree Visualization ","title":"Projection Pursuit Regression Tree Visualization ","text":"","code":"library(\"DALEX\") #> Welcome to DALEX (version: 2.4.2). #> Find examples and detailed introduction at: http://ema.drwhy.ai/ #>  #> 다음의 패키지를 부착합니다: 'DALEX' #> The following object is masked from 'package:dplyr': #>  #>     explain new_explainer <- explain_PP(PPTreeregOBJ = Model, data = sample_train[,-14],                              y = sample_train[,14], final.rule = 4) #> Preparation of a new explainer is initiated #>   -> model label       :  PPTreereg with final rule:  4  #>   -> data              :  354  rows  13  cols  #>   -> target variable   :  354  values  #>   -> predict function  :  function(m, x) as.numeric(predict.PPTreereg(m, x, final.rule = final.rule))  #>   -> predicted values  :  No value for predict function target column. (  default  ) #>   -> model_info        :  package Model of class: PPTreereg package unrecognized , ver. Unknown , task regression (  default  )  #>   -> predicted values  :  numerical, min =  6.23836 , mean =  22.16265 , max =  50.86801   #>   -> residual function :  difference between y and yhat (  default  ) #>   -> residuals         :  numerical, min =  -22.9165 , mean =  0.2167251 , max =  29.68961   #>   A new explainer has been created! DALEX::model_performance(new_explainer) #> Measures for:  regression #> mse        : 16.23654  #> rmse       : 4.029459  #> r2         : 0.8056848  #> mad        : 1.566196 #>  #> Residuals: #>           0%          10%          20%          30%          40%          50%  #> -22.91649613  -3.46075535  -2.01332404  -1.09793019  -0.59868895  -0.09435965  #>          60%          70%          80%          90%         100%  #>   0.57727933   1.21600562   2.26041174   4.14090308  29.68961335 DALEX::model_performance(new_explainer) %>% plot() DALEX::model_profile(new_explainer, variables = \"rm\") %>% plot() DALEX::model_profile(new_explainer, variables = \"rm\") %>%   plot(geom=\"profiles\") DALEX::predict_parts(new_explainer, new_observation = sample_one) %>% plot()"},{"path":"/reference/PPTreereg.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the projection pursuit regression tree — PPTreereg","title":"Construct the projection pursuit regression tree — PPTreereg","text":"Find regression tree structure using various projection pursuit indices split.","code":""},{"path":"/reference/PPTreereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the projection pursuit regression tree — PPTreereg","text":"","code":"PPTreereg(formula,data,DEPTH=NULL,Rr=1,PPmethod=\"LDA\",                  weight=TRUE,lambda=0.1,r=1,TOL.CV=0.1,selP=NULL,                  energy=0,maxiter=500,                  standardized=TRUE,even=TRUE,space=0,                  maxFinalNode=20,maxNodeN=10,...)"},{"path":"/reference/PPTreereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the projection pursuit regression tree — PPTreereg","text":"formula object class \"formula\" data data frame DEPTH depth projection pursuit regression tree Rr cutoff rule node PPmethod method projection pursuit; \"LDA\", \"PDA\", \"Lr\", \"GINI\", \"ENTROPY\". weight weight flag LDA, PDA Lr index lambda lambda PDA index r r Lr index TOL.CV CV limit final node selP number variables final node Method 5 energy energy parameter maxiter number maximum iteration standardized standardize X variable fitting tree structure. Default value TRUE even divide evenly node. Default value TRUE space space two groups dependent variable maxFinalNode maximum number final node maxNodeN maximum number observations final node ... arguments passed methods","code":""},{"path":"/reference/PPTreereg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the projection pursuit regression tree — PPTreereg","text":"Tree.result projection pursuit regression tree result  PPtreeclass object format MSE mean squared error final tree mean.G  means observations final node sd.G standard deviations observations final node. coef.G regression coefficients Method 3, 4 5 origY original dependent variable vector origX.mean mean original X origX.sd standard deviation original X class.origX.mean means independent variables final node","code":""},{"path":"/reference/PPTreereg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Construct the projection pursuit regression tree — PPTreereg","text":"...","code":""},{"path":"/reference/PPTreereg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct the projection pursuit regression tree — PPTreereg","text":"","code":"data(mtcars) Tree.result <- PPTreereg(mpg~.,mtcars,DEPTH=2,PPmethod=\"LDA\") Tree.result #> =============================================================  #> Projection Pursuit Classification Tree result  #> ============================================================= #>  #> 1) root #>    2)  proj1*X <= cut1 #>       4)* proj2*X <= cut2  ->  \"1\" #>       5)* proj2*X > cut2  ->  \"2\" #>    3)  proj1*X > cut1 #>       6)* proj3*X <= cut3  ->  \"3\" #>       7)* proj3*X > cut3  ->  \"4\" #>  #> MSE of various cutoff values  #> ------------------------------------------------------------- #>      Rule1  Rule2  Rule3  Rule4  Rule5  Rule6  Rule7  Rule8  Rule9 #> MSE 4.3929 4.9249 4.7723 4.3929 4.9249 4.9249 4.9249 4.7723 9.1987"},{"path":"/reference/PPimportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate variable importance — PPimportance","title":"Calculate variable importance — PPimportance","text":"Calculate importance variables PPTreereg model. local importance, weighted sum projection coefficients number data corresponding node weighted value node used. global importance absolute sum local importance.","code":""},{"path":"/reference/PPimportance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate variable importance — PPimportance","text":"","code":"PPimportance(PPTreeregOBJ,...)"},{"path":"/reference/PPimportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate variable importance — PPimportance","text":"PPTreeregOBJ PPTreereg class object - model explained ... arguments passed methods","code":""},{"path":"/reference/PPimportance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate variable importance — PPimportance","text":"object class PPimpobj","code":""},{"path":"/reference/PPimportance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate variable importance — PPimportance","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) PPimportance(Model) #> $imp_node_split #>   node.id node.n     X1     X2     X3     X4 #> 1       1    100 -0.583  2.414  3.117 -0.346 #> 2       2     50  0.954  3.843 -0.554  0.118 #> 3       3     50 -0.117 -0.462  3.661  1.540 #>  #> $imp_node_final #>    FinalNode 1 FinalNode 2 FinalNode 3 FinalNode 4 #> X1       0.053       0.530      -0.262      -0.321 #> X2      -2.168      -0.246       1.322       1.091 #> X3      -1.420      -1.697       0.643       2.474 #> X4       0.143       0.203      -0.558       0.212 #>  #> $imp_var #>      X1      X2      X3      X4  #>  55.916 228.309 261.208  58.741  #>  #> attr(,\"class\") #> [1] \"PPimportance\""},{"path":"/reference/PPregNodeViz.html","id":null,"dir":"Reference","previous_headings":"","what":"Node visualization — PPregNodeViz","title":"Node visualization — PPregNodeViz","text":"Visualize node projection pursuit regression tree.","code":""},{"path":"/reference/PPregNodeViz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Node visualization — PPregNodeViz","text":"","code":"PPregNodeViz(PPTreeregOBJ,node.id,Rule=5)"},{"path":"/reference/PPregNodeViz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Node visualization — PPregNodeViz","text":"PPTreeregOBJ PPTreereg class object - model explained node.id node ID inner final node Rule split rule 1: mean two group means 2: weighted mean two group means - weight group size 3: weighted mean two group means - weight group sd 4: weighted mean two group means - weight group se 5: mean two group medians 6: weighted mean two group medians - weight group size 7: weighted mean two group median - weight group IQR 8: weighted mean two group median - weight group IQR                                        group size","code":""},{"path":"/reference/PPregNodeViz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Node visualization — PPregNodeViz","text":"object class ggplot","code":""},{"path":"/reference/PPregNodeViz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Node visualization — PPregNodeViz","text":"function developed visualization inner final nodes. Visual representation projection coefficient value node result projected data help understand growth process projection pursuit regression tree. inner node, two plots provided - bar chart style plot projection pursuit coefficients variable, histogram projected data. final node, scatter plot observed Y vs. fitted Y according final rules.","code":""},{"path":"/reference/PPregNodeViz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Node visualization — PPregNodeViz","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) PPregNodeViz(Model,node.id=1)  PPregNodeViz(Model,node.id=4) #> Warning: Removed 2 rows containing missing values (`geom_point()`). #> Warning: Removed 2 rows containing missing values (`geom_point()`)."},{"path":"/reference/PPregVarViz.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize independent variable action in projection pursuit regression tree. — PPregVarViz","title":"Visualize independent variable action in projection pursuit regression tree. — PPregVarViz","text":"function developed see influence independent variables range dependent variable.","code":""},{"path":"/reference/PPregVarViz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize independent variable action in projection pursuit regression tree. — PPregVarViz","text":"","code":"PPregVarViz(PPTreeregOBJ,var.id,indiv=FALSE,                    DEPTH=NULL,smoothMethod=\"auto\", var.factor=FALSE)"},{"path":"/reference/PPregVarViz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize independent variable action in projection pursuit regression tree. — PPregVarViz","text":"PPTreeregOBJ PPTreereg class object - model explained var.id independent variable name indiv TRUE: individual group plot, FALSE: combined one plot DEPTH depth exploration smoothMethod method geom_smooth function var.factor TRUE indepedent variable categorical variable (factor)","code":""},{"path":"/reference/PPregVarViz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize independent variable action in projection pursuit regression tree. — PPregVarViz","text":"object class ggplot","code":""},{"path":"/reference/PPregVarViz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize independent variable action in projection pursuit regression tree. — PPregVarViz","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) PPregVarViz(Model,\"X1\") #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> Warning: Removed 5 rows containing missing values (`geom_smooth()`).  PPregVarViz(Model,\"X1\",indiv = TRUE) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"/reference/PPshapdependence.html","id":null,"dir":"Reference","previous_headings":"","what":"Dependency plot — PPshapdependence","title":"Dependency plot — PPshapdependence","text":"Dependency plot using PPKernelSHAP","code":""},{"path":"/reference/PPshapdependence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dependency plot — PPshapdependence","text":"","code":"PPshapdependence(data_long, x, y=NULL, color_feature=NULL, smooth=TRUE)"},{"path":"/reference/PPshapdependence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dependency plot — PPshapdependence","text":"data_long ppshapr_prep class object. x independent variable see y interaction effect putting values independent variables different colors. color_feature display variables color. Default value NULL. smooth geom_smooth option. Default value TRUE.","code":""},{"path":"/reference/PPshapdependence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dependency plot — PPshapdependence","text":"object class ggplot","code":""},{"path":"/reference/PPshapdependence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dependency plot — PPshapdependence","text":"Dependency plots designed show effect one independent variable model's prediction. point corresponds row training data, y axis corresponds PPKernelSHAP value variable, indicating much knowing value variable changes output model prediction data.","code":""},{"path":"/reference/PPshapdependence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dependency plot — PPshapdependence","text":"","code":"data(dataXY) testX <- dataXY[1,-1] Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) shap_long <- ppshapr_prep(Model, final.rule =5, method=\"simple\") PPshapdependence(shap_long,x = \"X1\") #> Warning: Removed 1 rows containing missing values (`geom_smooth()`)."},{"path":"/reference/PPshapsummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary plot — PPshapsummary","title":"Summary plot — PPshapsummary","text":"Summary plot using PPKernelSHAP","code":""},{"path":"/reference/PPshapsummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary plot — PPshapsummary","text":"","code":"PPshapsummary(data_long,...)"},{"path":"/reference/PPshapsummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary plot — PPshapsummary","text":"data_long ppshapr_prep class object. ... arguments passed methods","code":""},{"path":"/reference/PPshapsummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary plot — PPshapsummary","text":"object class ggplot","code":""},{"path":"/reference/PPshapsummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary plot — PPshapsummary","text":"summary plot used see aspects important variables final node. summary plot summarizes information independent variables contributed model's prediction training data form density plot.","code":""},{"path":"/reference/PPshapsummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary plot — PPshapsummary","text":"","code":"# \\donttest{ data(dataXY) testX <- dataXY[1,-1] Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) shap_long <- ppshapr_prep(Model, final.rule =5, method=\"simple\") PPshapsummary(shap_long)  # }"},{"path":"/reference/dataXY.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data — dataXY","title":"Simulated data — dataXY","text":"dataXY dataset simulated data running Projection Pursuit Regression Tree Model.","code":""},{"path":"/reference/dataXY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data — dataXY","text":"","code":"data(dataXY)"},{"path":"/reference/dataXY.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data — dataXY","text":"data frame 100 rows 4 variables.","code":""},{"path":"/reference/dataXY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated data — dataXY","text":"contains 100 rows 4 variables.","code":""},{"path":"/reference/dataXY.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated data — dataXY","text":"doi:10.3390/app11219885","code":""},{"path":"/reference/decisionplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Decision plot — decisionplot","title":"Decision plot — decisionplot","text":"decision plot PPKernelSHAP","code":""},{"path":"/reference/decisionplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decision plot — decisionplot","text":"","code":"decisionplot(   PPTreeregOBJ,   testObs,   final.rule = 5,   method = \"simple\",   varImp = \"shapImp\",   final.leaf = NULL,   Yrange = FALSE )"},{"path":"/reference/decisionplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decision plot — decisionplot","text":"PPTreeregOBJ PPTreereg class object - model explained testObs test data observation final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables method simple empirical method calculate PPKernelSHAP varImp shapImp treeImp - Sorted descending order variance variable importance coefficient values nodes inside PPTreereg. final.leaf location final leaf Yrange show entire final prediction range dependent variable. Default value FALSE.","code":""},{"path":"/reference/decisionplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decision plot — decisionplot","text":"object class ggplot","code":""},{"path":"/reference/decisionplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decision plot — decisionplot","text":"Decision plots mainly used explain individual predictions model makes decision, focusing model’s  predictions reach expected y value PPKernelSHAP values.","code":""},{"path":"/reference/decisionplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decision plot — decisionplot","text":"","code":"data(dataXY) testX <- dataXY[1,-1] Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) decisionplot(Model, testX, final.rule =5, method=\"simple\")"},{"path":"/reference/explain_PP.html","id":null,"dir":"Reference","previous_headings":"","what":"Make explain of PPTreeregObj for DALEX package — explain_PP","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"Create Model Explainer PPTreereg","code":""},{"path":"/reference/explain_PP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"","code":"explain_PP(PPTreeregOBJ, data, y, final.rule,...)"},{"path":"/reference/explain_PP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"PPTreeregOBJ PPTreereg class object - model explained data data.frame matrix - data used fitting. provided extracted model. Data passed without target column (shall provided y argument). y numeric vector outputs / scores. provided shall size data final.rule rule calculate final node value ... arguments passed methods","code":""},{"path":"/reference/explain_PP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"object class explainer.","code":""},{"path":"/reference/explain_PP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"function creates unified representation explain PPTreereg model cooperate DALEX package.","code":""},{"path":"/reference/explain_PP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"Explanatory Model Analysis. Explore, Explain Examine Predictive Models. https://ema.drwhy.ai/","code":""},{"path":"/reference/explain_PP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make explain of PPTreeregObj for DALEX package — explain_PP","text":"","code":"library(\"DALEX\") #> Welcome to DALEX (version: 2.4.2). #> Find examples and detailed introduction at: http://ema.drwhy.ai/ #> Additional features will be available after installation of: ggpubr. #> Use 'install_dependencies()' to get all suggested dependencies library(\"dplyr\") #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:DALEX’: #>  #>     explain #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) new_explainer <- explain_PP(Model, data = dataXY[,-1],y = dataXY[,1],final.rule= 5) #> Preparation of a new explainer is initiated #>   -> model label       :  PPTreereg with final rule:  5  #>   -> data              :  100  rows  4  cols  #>   -> target variable   :  100  values  #>   -> predict function  :  function(m, x) as.numeric(predict.PPTreereg(m, x, final.rule = final.rule))  #>   -> predicted values  :  No value for predict function target column. (  default  ) #>   -> model_info        :  package Model of class: PPTreereg package unrecognized , ver. Unknown , task regression (  default  )  #>   -> predicted values  :  numerical, min =  -0.9329429 , mean =  0.120199 , max =  1.015163   #>   -> residual function :  difference between y and yhat (  default  ) #>   -> residuals         :  numerical, min =  -0.05346393 , mean =  0.001310519 , max =  0.1063753   #>   A new explainer has been created!   DALEX::model_performance(new_explainer) %>% plot(geom = \"ecdf\")"},{"path":"/reference/feature_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"feature_exact — feature_exact","title":"feature_exact — feature_exact","text":"original source much came 'shapr' package code github.com/NorskRegnesentral/shapr/blob/master/R/features.R","code":""},{"path":"/reference/feature_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"feature_exact — feature_exact","text":"","code":"feature_exact(m, weight_zero_m = 10^6)"},{"path":"/reference/feature_exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"feature_exact — feature_exact","text":"m List. Contains vector integers indicating feature numbers different groups. weight_zero_m weight_zero_m","code":""},{"path":"/reference/feature_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"feature_exact — feature_exact","text":"data.table feature group combinations, shapley weights etc.","code":""},{"path":"/reference/feature_exact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"feature_exact — feature_exact","text":"original license statement 'shapr' package. MIT License Copyright (c) 2019 Norsk Regnesentral Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED \"\", WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/feature_exact.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"feature_exact — feature_exact","text":"shapr package developed Nikolai Sellereite, Martin Jullum, Annabelle Redelmeier, Norsk Regnesentral. doi:10.1016/j.artint.2021.103502  modified codes https://github.com/NorskRegnesentral/shapr","code":""},{"path":"/reference/feature_exact.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"feature_exact — feature_exact","text":"Nikolai Sellereite","code":""},{"path":"/reference/insurance.html","id":null,"dir":"Reference","previous_headings":"","what":"Insurance Data — insurance","title":"Insurance Data — insurance","text":"Dataset insurance part dataset imported  insurance.csv  Kaggle \"Medical Cost Personal Dataset\". data source material comes Machine Learning R Brett Lantz book. simply come cleaned , contains 1338 rows 7 variables. :","code":""},{"path":"/reference/insurance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insurance Data — insurance","text":"","code":"data(insurance)"},{"path":"/reference/insurance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Insurance Data — insurance","text":"data frame 1338 rows 7 columns.","code":""},{"path":"/reference/insurance.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Insurance Data — insurance","text":"insurance.csv dataset downloaded Kaggle site. dataset obtained https://www.kaggle.com/mirichoi0218/insurance May 11, 2021.","code":""},{"path":"/reference/insurance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insurance Data — insurance","text":"charges - Individual medical costs billed health insurance. age - age primary beneficiary. sex - insurance contractor gender, female, male. bmi - Body mass index, providing understanding body, weights relatively high low relative height, objective index body weight (kg / m ^ 2) using ratio height weight, ideally 18.5 24.9. children - Number children covered health insurance / Number dependents. smoker - Smoking. region - beneficiary's residential area US, northeast, southeast, southwest, northwest. Source: https://www.kaggle.com/mirichoi0218/insurance","code":""},{"path":"/reference/observation_impute_cpp_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Get imputed data — observation_impute_cpp_simple","title":"Get imputed data — observation_impute_cpp_simple","text":"Get imputed data","code":""},{"path":"/reference/observation_impute_cpp_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get imputed data — observation_impute_cpp_simple","text":"","code":"observation_impute_cpp_simple(xbar, index_simple, xtest, S)"},{"path":"/reference/observation_impute_cpp_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get imputed data — observation_impute_cpp_simple","text":"xbar mean leaf. index_simple Positive integer. xtest Numeric matrix. Represents single test observation. S Integer matrix dimension n_combinations x m, n_combinations equals total number sampled/non-sampled feature combinations m equals total number unique features. Note m = ncol(xtrain). See details information.","code":""},{"path":"/reference/observation_impute_cpp_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get imputed data — observation_impute_cpp_simple","text":"Numeric matrix","code":""},{"path":"/reference/observation_impute_cpp_simple.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get imputed data — observation_impute_cpp_simple","text":"Nikolai Sellereite","code":""},{"path":"/reference/plot.PPTreereg.html","id":null,"dir":"Reference","previous_headings":"","what":"PPTreereg plot — plot.PPTreereg","title":"PPTreereg plot — plot.PPTreereg","text":"projection pursuit regression tree plot","code":""},{"path":"/reference/plot.PPTreereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPTreereg plot — plot.PPTreereg","text":"","code":"# S3 method for PPTreereg plot(x, font.size = 17, width.size = 1, ...)"},{"path":"/reference/plot.PPTreereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPTreereg plot — plot.PPTreereg","text":"x PPTreereg class object font.size font size plot width.size size eclipse node. ... arguments passed methods","code":""},{"path":"/reference/plot.PPTreereg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPTreereg plot — plot.PPTreereg","text":"plot object","code":""},{"path":"/reference/plot.PPTreereg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPTreereg plot — plot.PPTreereg","text":"Draw projection pursuit regression tree tree structure. modified function party library.","code":""},{"path":"/reference/plot.PPTreereg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPTreereg plot — plot.PPTreereg","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) plot(Model)  #> NULL"},{"path":"/reference/plot.PPimportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable importance plot of PPTreereg — plot.PPimportance","title":"Variable importance plot of PPTreereg — plot.PPimportance","text":"Visualize importance measure trained PPTreereg model.","code":""},{"path":"/reference/plot.PPimportance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable importance plot of PPTreereg — plot.PPimportance","text":"","code":"# S3 method for PPimportance plot(x, marginal = FALSE, num_var = 5, ...)"},{"path":"/reference/plot.PPimportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable importance plot of PPTreereg — plot.PPimportance","text":"x importance object class PPimpobj, created PPimportance function marginal plot global importance. Default value FALSE. num_var number variables show. ... arguments passed methods","code":""},{"path":"/reference/plot.PPimportance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variable importance plot of PPTreereg — plot.PPimportance","text":"object class ggplot","code":""},{"path":"/reference/plot.PPimportance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable importance plot of PPTreereg — plot.PPimportance","text":"visualize variable importance values PPTreereg model, two types plots provided - importance variables final node global variable importance.","code":""},{"path":"/reference/plot.PPimportance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable importance plot of PPTreereg — plot.PPimportance","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) Tree.Imp <- PPimportance(Model) plot(Tree.Imp)  plot(Tree.Imp, marginal = TRUE)"},{"path":"/reference/pp_ggparty.html","id":null,"dir":"Reference","previous_headings":"","what":"PPTreereg plot with independent variable — pp_ggparty","title":"PPTreereg plot with independent variable — pp_ggparty","text":"projection pursuit regression tree plot independent variable","code":""},{"path":"/reference/pp_ggparty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPTreereg plot with independent variable — pp_ggparty","text":"","code":"pp_ggparty(PPTreeregOBJ,ind_variable,final.rule=5,Rule=1, ...)"},{"path":"/reference/pp_ggparty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPTreereg plot with independent variable — pp_ggparty","text":"PPTreeregOBJ PPTreereg class object ind_variable independent variable show final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables Rule split rule 1: mean two group means 2: weighted mean two group means - weight group size 3: weighted mean two group means - weight group sd 4: weighted mean two group means - weight group se 5: mean two group medians 6: weighted mean two group medians - weight group size 7: weighted mean two group median - weight group IQR 8: weighted mean two group median - weight group IQR                                        group size ... arguments passed methods","code":""},{"path":"/reference/pp_ggparty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPTreereg plot with independent variable — pp_ggparty","text":"object class ggplot","code":""},{"path":"/reference/pp_ggparty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPTreereg plot with independent variable — pp_ggparty","text":"Draw projection pursuit regression tree independent variable. modified function partykit library.","code":""},{"path":"/reference/pp_ggparty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPTreereg plot with independent variable — pp_ggparty","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) pp_ggparty(Model, \"X1\", final.rule=5)"},{"path":"/reference/ppshapr.empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PPKernelSHAP values with empirical methods — ppshapr.empirical","title":"Calculate PPKernelSHAP values with empirical methods — ppshapr.empirical","text":"function called internally, used stand-alone function. original source much came 'shapr' package code github.com/NorskRegnesentral/shapr/blob/master/R/predictions.R","code":""},{"path":"/reference/ppshapr.empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PPKernelSHAP values with empirical methods — ppshapr.empirical","text":"","code":"ppshapr.empirical(PPTreeregOBJ, testObs, final.rule, final.leaf = NULL)"},{"path":"/reference/ppshapr.empirical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PPKernelSHAP values with empirical methods — ppshapr.empirical","text":"PPTreeregOBJ PPTreereg class object - model explained testObs test data observation final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables final.leaf location final leaf","code":""},{"path":"/reference/ppshapr.empirical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PPKernelSHAP values with empirical methods — ppshapr.empirical","text":"List empirical methods model values","code":""},{"path":"/reference/ppshapr.empirical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate PPKernelSHAP values with empirical methods — ppshapr.empirical","text":"original license statement 'shapr' package. MIT License Copyright (c) 2019 Norsk Regnesentral Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED \"\", WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/ppshapr.simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PPKernelSHAP values with simple methods — ppshapr.simple","title":"Calculate PPKernelSHAP values with simple methods — ppshapr.simple","text":"function called internally, used stand-alone function. original source much came 'shapr' package code github.com/NorskRegnesentral/shapr/blob/master/R/predictions.R","code":""},{"path":"/reference/ppshapr.simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PPKernelSHAP values with simple methods — ppshapr.simple","text":"","code":"ppshapr.simple(PPTreeregOBJ, testObs, final.rule, final.leaf = NULL)"},{"path":"/reference/ppshapr.simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PPKernelSHAP values with simple methods — ppshapr.simple","text":"PPTreeregOBJ PPTreereg class object - model explained testObs test data observation final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables final.leaf location final leaf","code":""},{"path":"/reference/ppshapr.simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PPKernelSHAP values with simple methods — ppshapr.simple","text":"List simple methods model values","code":""},{"path":"/reference/ppshapr.simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate PPKernelSHAP values with simple methods — ppshapr.simple","text":"original license statement 'shapr' package. MIT License Copyright (c) 2019 Norsk Regnesentral Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED \"\", WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/ppshapr_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PPKernelSHAP for all train data set — ppshapr_prep","title":"Calculate PPKernelSHAP for all train data set — ppshapr_prep","text":"train data set calculate PPKernelSHAP","code":""},{"path":"/reference/ppshapr_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PPKernelSHAP for all train data set — ppshapr_prep","text":"","code":"ppshapr_prep(PPTreeregOBJ = NULL, final.rule = 5, method = \"simple\")"},{"path":"/reference/ppshapr_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PPKernelSHAP for all train data set — ppshapr_prep","text":"PPTreeregOBJ PPTreereg class object - model explained final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables method simple empirical method calculate PPKernelSHAP","code":""},{"path":"/reference/ppshapr_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PPKernelSHAP for all train data set — ppshapr_prep","text":"ppshapr_prep class object","code":""},{"path":"/reference/ppshapr_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate PPKernelSHAP for all train data set — ppshapr_prep","text":"","code":"data(dataXY) testX <- dataXY[1,-1] Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) shap_long <- ppshapr_prep(Model, final.rule =5, method=\"simple\")"},{"path":"/reference/predict.PPTreereg.html","id":null,"dir":"Reference","previous_headings":"","what":"predict PPTreereg — predict.PPTreereg","title":"predict PPTreereg — predict.PPTreereg","text":"predict projection pursuit regression tree","code":""},{"path":"/reference/predict.PPTreereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"predict PPTreereg — predict.PPTreereg","text":"","code":"# S3 method for PPTreereg predict(   object,   newdata = NULL,   Rule = 1,   final.rule = 1,   classinfo = FALSE,   ... )"},{"path":"/reference/predict.PPTreereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"predict PPTreereg — predict.PPTreereg","text":"object fitted object class inheriting PPTreereg newdata test data set Rule split rule 1: mean two group means 2: weighted mean two group means - weight group size 3: weighted mean two group means - weight group sd 4: weighted mean two group means - weight group se 5: mean two group medians 6: weighted mean two group medians - weight group size 7: weighted mean two group median - weight group IQR 8: weighted mean two group median - weight group IQR                                        group size 9: cutoff minimize error rates node final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables classinfo return final node information. Default value FALSE ... arguments passed methods","code":""},{"path":"/reference/predict.PPTreereg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"predict PPTreereg — predict.PPTreereg","text":"Numeric","code":""},{"path":"/reference/predict.PPTreereg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"predict PPTreereg — predict.PPTreereg","text":"Predict class test set fitted projection pursuit regression tree calculate prediction error.","code":""},{"path":"/reference/predict.PPTreereg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"predict PPTreereg — predict.PPTreereg","text":"","code":"data(dataXY) Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) predict(Model) #>          1          1          1          1          1          1          1  #> -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073  #>          1          1          1          1          1          1          1  #> -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073  #>          1          1          1          1          1          1          1  #> -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.6620073  #>          1          1          1          1          2          2          2  #> -0.6620073 -0.6620073 -0.6620073 -0.6620073 -0.1023781 -0.1023781 -0.1023781  #>          2          2          2          2          2          2          2  #> -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781  #>          2          2          2          2          2          2          2  #> -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781  #>          2          2          2          2          2          2          2  #> -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781 -0.1023781  #>          2          3          3          3          3          3          3  #> -0.1023781  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  #>          3          3          3          3          3          3          3  #>  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  #>          3          3          3          3          3          3          3  #>  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  #>          3          3          3          3          3          4          4  #>  0.4373236  0.4373236  0.4373236  0.4373236  0.4373236  0.8144799  0.8144799  #>          3          4          4          4          4          4          4  #>  0.4373236  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  #>          4          4          4          4          4          4          4  #>  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  #>          4          4          4          4          4          4          4  #>  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  0.8144799  #>          4          4  #>  0.8144799  0.8144799"},{"path":"/reference/print.PPTreereg.html","id":null,"dir":"Reference","previous_headings":"","what":"Print PPTreereg result — print.PPTreereg","title":"Print PPTreereg result — print.PPTreereg","text":"Print PP.Tree.reg result","code":""},{"path":"/reference/print.PPTreereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print PPTreereg result — print.PPTreereg","text":"","code":"# S3 method for PPTreereg print(   x,   tree.print = TRUE,   coef.print = FALSE,   cutoff.print = FALSE,   verbose = TRUE,   final.rule = 1,   ... )"},{"path":"/reference/print.PPTreereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print PPTreereg result — print.PPTreereg","text":"x PPTreereg object tree.print print tree structure TRUE coef.print print projection coefficient node TRUE cutoff.print print cutoff values node TRUE verbose print TRUE, output FALSE final.rule rule calculate final node value ... arguments passed methods","code":""},{"path":"/reference/print.PPTreereg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print PPTreereg result — print.PPTreereg","text":"tree print","code":""},{"path":"/reference/print.PPTreereg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print PPTreereg result — print.PPTreereg","text":"Print projection pursuit regression tree result","code":""},{"path":"/reference/shapley_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"shapley_weights — shapley_weights","title":"shapley_weights — shapley_weights","text":"original source much came 'shapr' package code github.com/NorskRegnesentral/shapr/blob/master/R/shapley.R original license statement 'shapr' package.","code":""},{"path":"/reference/shapley_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"shapley_weights — shapley_weights","text":"","code":"shapley_weights(m, N, n_components, weight_zero_m = 10^6)"},{"path":"/reference/shapley_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"shapley_weights — shapley_weights","text":"m m N N n_components n_components weight_zero_m weight_zero_m","code":""},{"path":"/reference/shapley_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"shapley_weights — shapley_weights","text":"Numeric","code":""},{"path":"/reference/shapley_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"shapley_weights — shapley_weights","text":"MIT License Copyright (c) 2019 Norsk Regnesentral Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED \"\", WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/shapley_weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"shapley_weights — shapley_weights","text":"shapr package developed Nikolai Sellereite, Martin Jullum, Annabelle Redelmeier, Norsk Regnesentral. doi:10.1016/j.artint.2021.103502  modified codes https://github.com/NorskRegnesentral/shapr","code":""},{"path":"/reference/shapley_weights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shapley_weights — shapley_weights","text":"Nikolai Sellereite","code":""},{"path":"/reference/subpick.html","id":null,"dir":"Reference","previous_headings":"","what":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","title":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","text":"Pick several data containing various information final node PPTreereg submodular Pick (SP-LIME) developed (Ribeiro et al., 2016) selects representative data important information determine reliability model based LIME algorithm. order extract data final node PPTreereg model,  PP SP-LIME proposed based SP-LIME.","code":""},{"path":"/reference/subpick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","text":"","code":"subpick(data_long, final.leaf, obsnum = 5)"},{"path":"/reference/subpick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","text":"data_long ppshapr_prep class object. final.leaf location final leaf obsnum number budgets (instance selected). Default value 1.","code":""},{"path":"/reference/subpick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","text":"Observation names original values data","code":""},{"path":"/reference/subpick.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","text":"Ribeiro, Marco Tulio, Sameer Singh, Carlos Guestrin. \"\" trust ?\" Explaining predictions classifier.\" Proceedings 22nd ACM SIGKDD international conference knowledge discovery data mining. 2016. doi:10.1145/2939672.2939778  https://github.com/marcotcr/lime/blob/master/lime/submodular_pick.py","code":""},{"path":"/reference/subpick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"projection pursuit submodular pick algorithm PP SP-LIME — subpick","text":"","code":"data(\"dataXY\") Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) shap_long=ppshapr_prep(Model,final.rule =3,method=\"simple\") subpick(shap_long,final.leaf = 1, obsnum = 5) #> $df #>            X1          X2          X3          X4 #> 1: -0.9914675 -0.02113538 -0.21720208 -0.20022119 #> 2: -0.9227497 -0.04326195 -0.08216778 -0.08993753 #> 3: -0.7565387 -0.95066358 -0.80080205 -0.45462817 #> 4: -0.4413600 -0.04904089 -0.89174001 -0.11116254 #> 5: -0.4747434 -0.04723519 -0.01193100 -0.30905409 #>  #> $obs #> [1]  1  5 10 23 24 #>"},{"path":"/reference/summary.PPTreereg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary PPTreereg result — summary.PPTreereg","title":"Summary PPTreereg result — summary.PPTreereg","text":"summary PPTreereg result","code":""},{"path":"/reference/summary.PPTreereg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary PPTreereg result — summary.PPTreereg","text":"","code":"# S3 method for PPTreereg summary(object, c = NA, ...)"},{"path":"/reference/summary.PPTreereg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary PPTreereg result — summary.PPTreereg","text":"object fitted object class inheriting PPTreereg c choose node id summary. Default value FALSE. ... arguments passed methods","code":""},{"path":"/reference/summary.PPTreereg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary PPTreereg result — summary.PPTreereg","text":"summary projection pursuit regression tree result","code":""},{"path":"/reference/waterfallplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Waterfall plot — waterfallplot","title":"Waterfall plot — waterfallplot","text":"waterfall plot PPKernelSHAP","code":""},{"path":"/reference/waterfallplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Waterfall plot — waterfallplot","text":"","code":"waterfallplot(   PPTreeregOBJ,   testObs,   final.rule = 5,   method = \"simple\",   final.leaf = NULL )"},{"path":"/reference/waterfallplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waterfall plot — waterfallplot","text":"PPTreeregOBJ PPTreereg class object - model explained testObs test data observation final.rule final rule assign numerical values final nodes. 1: mean value final nodes 2: median value final nodes 3: using optimal projection 4: using independent variables 5: using several significant independent variables method simple empirical method calculate PPKernelSHAP final.leaf location final leaf","code":""},{"path":"/reference/waterfallplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Waterfall plot — waterfallplot","text":"object class ggplot","code":""},{"path":"/reference/waterfallplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Waterfall plot — waterfallplot","text":"Waterfall plot mainly used explain individual predictions, suitable showing explanation single piece data entered input using PPKernelSHAP values.","code":""},{"path":"/reference/waterfallplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Waterfall plot — waterfallplot","text":"","code":"data(dataXY) testX <- dataXY[1,-1] Model <- PPTreereg(Y~., data = dataXY, DEPTH = 2) waterfallplot(Model, testX, final.rule =5, method=\"simple\")"},{"path":"/reference/weight_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"weight_matrix — weight_matrix","title":"weight_matrix — weight_matrix","text":"original source much came 'shapr' package code github.com/NorskRegnesentral/shapr/blob/master/R/shapley.R original license statement 'shapr' package.","code":""},{"path":"/reference/weight_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"weight_matrix — weight_matrix","text":"","code":"weight_matrix(X, normalize_W_weights = TRUE)"},{"path":"/reference/weight_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"weight_matrix — weight_matrix","text":"X X normalize_W_weights default TRUE","code":""},{"path":"/reference/weight_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"weight_matrix — weight_matrix","text":"Numeric matrix","code":""},{"path":"/reference/weight_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"weight_matrix — weight_matrix","text":"MIT License Copyright (c) 2019 Norsk Regnesentral Permission hereby granted, free charge, person obtaining copy software associated documentation files (\"Software\"), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED \"\", WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/weight_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"weight_matrix — weight_matrix","text":"shapr package developed Nikolai Sellereite, Martin Jullum, Annabelle Redelmeier, Norsk Regnesentral. doi:10.1016/j.artint.2021.103502  modified codes https://github.com/NorskRegnesentral/shapr","code":""},{"path":"/reference/weight_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"weight_matrix — weight_matrix","text":"Nikolai Sellereite","code":""},{"path":"/reference/weight_matrix_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weight matrix — weight_matrix_cpp","title":"Calculate weight matrix — weight_matrix_cpp","text":"Calculate weight matrix","code":""},{"path":"/reference/weight_matrix_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weight matrix — weight_matrix_cpp","text":"","code":"weight_matrix_cpp(subsets, m, n, w)"},{"path":"/reference/weight_matrix_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weight matrix — weight_matrix_cpp","text":"subsets List. elements equals integer vector representing valid combination features/feature groups. m Integer. Number features/feature groups n Integer. Number combinations w Numeric vector length n, .e. w[] equals Shapley weight feature/feature group combination , represented subsets[[]].","code":""},{"path":"/reference/weight_matrix_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weight matrix — weight_matrix_cpp","text":"Matrix dimension n x m + 1","code":""},{"path":"/reference/weight_matrix_cpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate weight matrix — weight_matrix_cpp","text":"Nikolai Sellereite","code":""},{"path":"/news/index.html","id":"id_-pptreeregviz-203","dir":"Changelog","previous_headings":"","what":"# PPtreeregViz 2.0.3","title":"# PPtreeregViz 2.0.3","text":"minor code fixes ‘subpick()’ removed ‘..feature_dict’ variable calling scope clarity. Added missing Rd-tags regarding exported methods explain functions results documentation. Add authors, contributors copyright holders Authors@R field appropriate roles.","code":""},{"path":"/news/index.html","id":"id_-pptreeregviz-202","dir":"Changelog","previous_headings":"","what":"# PPtreeregViz 2.0.2","title":"# PPtreeregViz 2.0.2","text":"major release adding range substantial new features fixing large number bugs.","code":""},{"path":"/news/index.html","id":"id_-pptreeregviz-102","dir":"Changelog","previous_headings":"","what":"# PPtreeregViz 1.0.2","title":"# PPtreeregViz 1.0.2","text":"package PPtreeregViz_1.0.2.tar.gz auto-processed pending manual inspection new CRAN submission. reduced vignette build timings using iterations","code":""},{"path":"/news/index.html","id":"id_-pptreeregviz-101","dir":"Changelog","previous_headings":"","what":"# PPtreeregViz 1.0.1","title":"# PPtreeregViz 1.0.1","text":"First Release","code":""}]
